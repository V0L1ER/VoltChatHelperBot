import os
from aiogram import Router, Bot, F
from aiogram.types import Message, ChatMemberAdministrator, ChatPermissions, ChatMemberOwner, ChatMemberBanned
from aiogram.filters import Command, CommandObject, BaseFilter
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
from sqlalchemy.future import select
from database.database import AsyncSessionLocal
from database.models import Warning, UserStats
from datetime import datetime
from config import get_settings
from utils.logger import BotLogger
from typing import Tuple, Optional
from sqlalchemy import select
from sqlalchemy import func
from functools import wraps
from utils.command_logging import log_command

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

logger = BotLogger.get_logger()
settings = get_settings()

def allowed_chat_only():
    def decorator(func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            if message.chat.id != settings.CHAT_ID:
                logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ: {message.chat.id}"
                )
                return
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator

class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if str(message.from_user.id) in settings.ADMIN_IDS.split(','):
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
        if message.sender_chat:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
                chat_info = await message.bot.get_chat(message.sender_chat.id)
                if chat_info.type in ['channel', 'supergroup']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
                    admins = await message.bot.get_chat_administrators(message.chat.id)
                    for admin in admins:
                        if isinstance(admin, ChatMemberOwner):
                            return True
            except Exception as e:
                logger.error(f"Error checking channel/chat admin rights: {e}")
                return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
        try:
            chat_member = await message.chat.get_member(message.from_user.id)
            return isinstance(chat_member, (ChatMemberOwner, ChatMemberAdministrator))
        except Exception as e:
            logger.error(f"Error checking admin rights: {e}")
            return False

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —Ä–æ—É—Ç–µ—Ä–µ
router.message.filter(IsAdmin())

async def check_admin_rights(message: Message) -> Tuple[bool, Optional[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.sender_chat:
        if message.sender_chat.id in [int(settings.CHANNEL_ID), int(settings.CHAT_ID)]:
            return True, None
        return False, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"
    
    try:
        admin_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        if isinstance(admin_member, (ChatMemberOwner, ChatMemberAdministrator)):
            return True, None
        return False, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"
    except Exception as e:
        logger.error(f"Error checking admin rights: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

async def check_bot_rights(message: Message) -> Tuple[bool, Optional[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞"""
    try:
        bot_member = await message.bot.get_chat_member(message.chat.id, message.bot.id)
        if isinstance(bot_member, ChatMemberAdministrator) and bot_member.can_restrict_members:
            return True, None
        return False, "–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏."
    except Exception as e:
        logger.error(f"Error checking bot rights: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞."

@router.message(Command("ban"))
@allowed_chat_only()
async def ban_user(message: Message):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if str(user_id) in settings.ADMIN_IDS.split(','):
            await message.reply("–ê–¥–º–∏–Ω–æ–≤ –±–∞–Ω–∏—à—å? –ê–π-–∞–π-–∞–π üòà")
            return

        target_member = await message.bot.get_chat_member(chat_id, user_id)
        if isinstance(target_member, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
        await message.bot.ban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            revoke_messages=True
        )

        await message.reply(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} "
            f"(id: {user_id}) –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        )
        logger.info(f"User {user_id} was banned in chat {chat_id}")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Ban error in chat {chat_id}: {str(e)}")

@router.message(Command("unban"))
@allowed_chat_only()
async def unban_user(message: Message):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id

    try:
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.bot.unban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            only_if_banned=True
        )

        await message.reply(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} "
            f"(id: {user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        )
        logger.info(f"User {user_id} was unbanned in chat {chat_id}")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Unban error in chat {chat_id}: {str(e)}")

@router.message(Command("kick"))
@allowed_chat_only()
async def kick_user(message: Message):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    user_name = message.reply_to_message.from_user.full_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if str(user_id) in settings.ADMIN_IDS.split(','):
            await message.reply("–ê–¥–º–∏–Ω–æ–≤ –∫–∏–∫–∞–µ—à—å? –ê–π-–∞–π-–∞–π üòà")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç—å —Å–∞–º —Å–µ–±—è
        if message.from_user and message.from_user.id == user_id:
            await message.reply("–ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è ü§™")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ü–µ–ª–∏
        target_member = await message.bot.get_chat_member(chat_id, user_id)
        if isinstance(target_member, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–Ω —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–±–∞–Ω–æ–º)
        await message.bot.ban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            revoke_messages=False  # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∫–∏–∫–µ
        )
        
        # –°—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        await message.bot.unban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            only_if_banned=True
        )

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞.")
        logger.info(f"User {user_id} was kicked from chat {chat_id}")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Kick error in chat {chat_id}: {str(e)}")

@router.message(Command("warn"))
@allowed_chat_only()
async def warn_user(message: Message):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if str(user_id) in settings.ADMIN_IDS.split(','):
            await message.reply("–ê–¥–º–∏–Ω–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—à—å? –ê–π-–∞–π-–∞–π üòà")
            return

        target_member = await message.bot.get_chat_member(chat_id, user_id)
        if isinstance(target_member, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        async with AsyncSessionLocal() as session:
            stmt = select(Warning).where(Warning.chat_id == chat_id, Warning.user_id == user_id)
            result = await session.execute(stmt)
            warning = result.scalars().first()

            if not warning:
                warning = Warning(chat_id=chat_id, user_id=user_id, warning_count=1, last_warning=datetime.now(timezone.utc))
                session.add(warning)
            else:
                warning.warning_count += 1
                warning.last_warning = datetime.now(timezone.utc)

            await session.commit()

        await message.reply(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.reply_to_message.from_user.full_name} "
            f"–≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning.warning_count}"
        )
        logger.info(f"Warning issued to user {user_id} in chat {chat_id}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Warning error in chat {chat_id}: {str(e)}")

@router.message(Command("remwarn"))
@allowed_chat_only()
async def remove_warn(message: Message, command: CommandObject):
    await log_command(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_name = message.reply_to_message.from_user.full_name
    elif command.args:
        try:
            user_id = int(command.args)
            try:
                member = await message.chat.get_member(user_id)
                user_name = member.user.full_name
            except:
                user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    else:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/remwarn <user_id>`"
        )
        return

    try:
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É —Å–µ–±—è
        if message.from_user.id == user_id:
            await message.reply("–ù–µ–ª—å–∑—è —Å–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è ü§™")
            return

        async with AsyncSessionLocal() as session:
            stmt = select(Warning).where(Warning.chat_id == chat_id, Warning.user_id == user_id)
            result = await session.execute(stmt)
            warning = result.scalars().first()

            if not warning or warning.warning_count == 0:
                await message.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
                return

            warning.warning_count -= 1
            await session.commit()

        await message.reply(
            f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. "
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning.warning_count}"
        )
        logger.info(f"Warning removed from user {user_id} in chat {chat_id}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Remove warning error in chat {chat_id}: {str(e)}")

@router.message(Command("listwarns"))
@allowed_chat_only()
async def list_warns(message: Message):
    await log_command(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id

    try:
        async with AsyncSessionLocal() as session:
            stmt = select(Warning).where(Warning.chat_id == chat_id, Warning.warning_count > 0)
            result = await session.execute(stmt)
            warnings = result.scalars().all()

            if not warnings:
                await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.")
                return

            warn_list = []
            for warning in warnings:
                try:
                    member = await message.chat.get_member(warning.user_id)
                    user = member.user
                    user_name = f"@{user.username}" if user.username else user.full_name
                except Exception:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {warning.user_id}"
                
                warn_list.append(f"{user_name} (ID: {warning.user_id}): {warning.warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ(–∏–π)")

            warn_list_str = "\n".join(warn_list)
            await message.reply(f"–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:\n{warn_list_str}")
            logger.info(f"Warnings list requested in chat {chat_id}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"List warnings error in chat {chat_id}: {str(e)}")

@router.message(Command("mute"))
@allowed_chat_only()
async def mute_user(message: Message, command: CommandObject):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    args = command.args
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: /mute 60")
        return

    try:
        duration = int(args)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    user_name = message.reply_to_message.from_user.full_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if str(user_id) in settings.ADMIN_IDS.split(','):
            await message.reply("–ê–¥–º–∏–Ω–æ–≤ –º—É—Ç–∏—à—å? –ê–π-–∞–π-–∞–π üòà")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if message.from_user and message.from_user.id == user_id:
            await message.reply("–ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è ü§™")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ü–µ–ª–∏
        target_member = await message.bot.get_chat_member(chat_id, user_id)
        if isinstance(target_member, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
        until_date = datetime.now(timezone.utc) + timedelta(minutes=duration)

        # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.chat.restrict(
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            ),
            until_date=until_date
        )

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
        logger.info(f"User {user_id} was muted in chat {chat_id} for {duration} minutes")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Mute error in chat {chat_id}: {str(e)}")

@router.message(Command("unmute"))
@allowed_chat_only()
async def unmute_user(message: Message):
    await log_command(message)
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_has_rights, error_msg = await check_bot_rights(message)
    if not bot_has_rights:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    user_name = message.reply_to_message.from_user.full_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if message.from_user and message.from_user.id == user_id:
            await message.reply("–ù–µ–ª—å–∑—è —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è ü§™")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) in settings.ADMIN_IDS.split(','):
            await message.reply("–ê–¥–º–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º—É—á–µ–Ω—ã üòé")
            return

        target_member = await message.bot.get_chat_member(chat_id, user_id)
        if isinstance(target_member, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º—É—á–µ–Ω—ã.")
            return

        # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.chat.restrict(
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )

        await message.reply(f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —Å–Ω—è—Ç –º—É—Ç.")
        logger.info(f"User {user_id} was unmuted in chat {chat_id}")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Unmute error in chat {chat_id}: {str(e)}")

@router.message(Command("poll"))
@allowed_chat_only()
async def create_poll(message: Message, command: CommandObject):
    await log_command(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    chat_id = message.chat.id
    args = command.args

    if not args:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ '|'.\n"
            "–ü—Ä–∏–º–µ—Ä: /poll –í–∞—à –≤–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç 1 | –í–∞—Ä–∏–∞–Ω—Ç 2"
        )
        return

    parts = [part.strip() for part in args.split('|')]
    if len(parts) < 3:  # –ú–∏–Ω–∏–º—É–º –Ω—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –∏ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: /poll –í–∞—à –≤–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç 1 | –í–∞—Ä–∏–∞–Ω—Ç 2"
        )
        return

    question = parts[0]
    options = parts[1:]

    if len(options) > 10:
        await message.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ - 10.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç
        await message.answer_poll(
            question=question,
            options=options,
            is_anonymous=True,
            allows_multiple_answers=False
        )
        logger.info(f"Poll created in chat {chat_id} by user {message.from_user.id}")

    except TelegramBadRequest as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Poll creation error in chat {chat_id}: {str(e)}")
    except Exception as e:
        error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Unexpected poll creation error in chat {chat_id}: {str(e)}")


@router.message(Command("admin_help"))
@allowed_chat_only()
async def admin_help(message: Message):
    await log_command(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, error_msg = await check_admin_rights(message)
    if not is_admin:
        await message.reply(error_msg)
        return

    help_text = """
    üìö *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*

    *–ú–æ–¥–µ—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*
    ‚Ä¢ `/ban` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–≤—Å–µ–≥–¥–∞)
    ‚Ä¢ `/unban` - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ‚Ä¢ `/kick` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
    ‚Ä¢ `/mute <–º–∏–Ω—É—Ç—ã>` - –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    ‚Ä¢ `/unmute` - –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:*
    ‚Ä¢ `/warn` - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ‚Ä¢ `/remwarn` - –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ‚Ä¢ `/listwarns` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

    *–û–ø—Ä–æ—Å—ã:*
    ‚Ä¢ `/poll <–≤–æ–ø—Ä–æ—Å> | <–≤–∞—Ä–∏–∞–Ω—Ç 1> | <–≤–∞—Ä–∏–∞–Ω—Ç 2>` - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å
    –ü—Ä–∏–º–µ—Ä: `/poll –õ—é–±–∏—Ç–µ –ª–∏ –≤—ã –ø–∏—Ü—Ü—É? | –î–∞ | –ù–µ—Ç | –ò–Ω–æ–≥–¥–∞`

    *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ä—ã:*
    ‚Ä¢ `/tempban <–≤—Ä–µ–º—è>` - –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
    ‚Ä¢ `/info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    ‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞

    *–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:*
    ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–∞–Ω/–∫–∏–∫/–º—É—Ç/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ‚Ä¢ –ù–µ–ª—å–∑—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    ‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–µ

    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/help <–∫–æ–º–∞–Ω–¥–∞>`
    """
    
    try:
        await message.reply(
            text=help_text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info(f"Admin help shown in chat {message.chat.id} for user {message.from_user.id}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {str(e)}"
        await message.reply(error_msg)
        logger.error(f"Error showing admin help in chat {message.chat.id}: {str(e)}")


@router.message(Command("info"))
@allowed_chat_only()
async def user_info(message: Message):
    await log_command(message)
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin, error_msg = await check_admin_rights(message)
        if not is_admin:
            await message.reply(error_msg)
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–∞—Ç–µ
        member = await message.chat.get_member(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with AsyncSessionLocal() as session:
            async with session.begin():  # –Ø–≤–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                stats = await session.execute(
                    select(UserStats)
                    .where(
                        UserStats.user_id == user.id,
                        UserStats.chat_id == message.chat.id
                    )
                )
                user_stats = stats.scalar_one_or_none()
                messages_count = user_stats.message_count if user_stats else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info = [
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>",
            f"ID: <code>{user.id}</code>",
            f"–ò–º—è: {user.full_name}",
            f"–°—Ç–∞—Ç—É—Å: <code>{member.status}</code>",
            f"–ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}",
            f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {messages_count}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.username:
            info.insert(3, f"Username: @{user.username}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.language_code:
            info.append(f"–Ø–∑—ã–∫: {user.language_code}")
            
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        info_text = "\n".join(info)
        
        await message.reply(info_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        

@router.message(Command("stats"))
@allowed_chat_only()
async def chat_stats(message: Message):
    await log_command(message)
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
    logger.info(f"Stats command received from user {message.from_user.id}")

    try:
        logger.info(f"Starting stats command processing for chat {message.chat.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin, error_msg = await check_admin_rights(message)
        if not is_admin:
            logger.warning(f"User {message.from_user.id} tried to use stats without admin rights")
            await message.reply(error_msg)
            return

        chat = message.chat
        logger.info(f"Getting administrators for chat {chat.id}")
        admins = await message.bot.get_chat_administrators(chat.id)
        members_count = await message.bot.get_chat_member_count(chat.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with AsyncSessionLocal() as session:
            logger.info("Querying database for message statistics")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
            total_messages_query = await session.execute(
                select(func.coalesce(func.sum(UserStats.message_count), 0))
                .where(UserStats.chat_id == chat.id)
            )
            total_messages = total_messages_query.scalar()
            logger.info(f"Total messages in chat: {total_messages}")

            # –¢–æ–ø 5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            top_users_query = await session.execute(
                select(UserStats)
                .where(UserStats.chat_id == chat.id)
                .order_by(UserStats.message_count.desc())
                .limit(5)
            )
            top_users = top_users_query.scalars().all()
            logger.info(f"Found {len(top_users)} top users")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = [
            "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞*",
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {chat.title}",
            f"*–¢–∏–ø —á–∞—Ç–∞:* {chat.type}",
            f"*–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* {members_count}",
            f"*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:* {len(admins)}",
            f"*–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* {total_messages}",
            "",
            "üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin in admins:
            admin_user = admin.user
            admin_status = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if isinstance(admin, ChatMemberOwner) else "üëÆ –ê–¥–º–∏–Ω"
            stats.append(f"‚Ä¢ {admin_status}: {admin_user.full_name}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if top_users:
            stats.extend([
                "",
                "üèÜ *–¢–æ–ø 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*"
            ])
            for i, user_stat in enumerate(top_users, 1):
                try:
                    member = await chat.get_member(user_stat.user_id)
                    user_name = member.user.full_name
                    stats.append(f"{i}. {user_name}: {user_stat.message_count} —Å–æ–æ–±—â.")
                except Exception as e:
                    logger.error(f"Error getting member info: {e}")
                    stats.append(f"{i}. ID {user_stat.user_id}: {user_stat.message_count} —Å–æ–æ–±—â.")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if chat.description:
            stats.extend([
                "",
                "*–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞:*",
                chat.description
            ])

        stats_text = "\n".join(stats)
        logger.info("Sending stats message")
        await message.reply(
            stats_text,
            parse_mode="Markdown"
        )
        logger.info(f"Stats successfully sent for chat {chat.id}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        logger.error(f"Stats error in chat {message.chat.id}: {str(e)}", exc_info=True)
        await message.reply(error_msg)

@router.message(Command("tempban"))
@allowed_chat_only()
async def temp_ban(message: Message, command: CommandObject):
    await log_command(message)
    """–í—Ä–µ–º–µ–Ω–Ω–æ –±–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏."""
    if not message.reply_to_message or not command.args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10m, 2h, 1d)")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
    def parse_time(time_str: str) -> Optional[timedelta]:
        try:
            unit = time_str[-1].lower()
            value = int(time_str[:-1])
            if unit == 'm':
                return timedelta(minutes=value)
            elif unit == 'h':
                return timedelta(hours=value)
            elif unit == 'd':
                return timedelta(days=value)
            else:
                return None
        except (ValueError, IndexError):
            return None

    time_input = command.args.strip()
    delta = parse_time(time_input)

    if not delta:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã: m (–º–∏–Ω—É—Ç—ã), h (—á–∞—Å—ã), d (–¥–Ω–∏). –ü—Ä–∏–º–µ—Ä—ã: 10m, 2h, 1d")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–Ω–µ–π)
    max_delta = timedelta(days=7)
    if delta > max_delta:
        await message.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ - 7 –¥–Ω–µ–π.")
        return

    user_id = message.reply_to_message.from_user.id
    user_name = message.reply_to_message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–Ω—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = settings.ADMIN_IDS.split(',')
    if str(user_id) in admin_ids:
        await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω
    has_bot_rights, bot_error = await check_bot_rights(message)
    if not has_bot_rights:
        await message.reply(bot_error)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin, admin_error = await check_admin_rights(message)
    if not is_admin:
        await message.reply(admin_error)
        return

    until_date = datetime.now(timezone.utc) + delta

    try:
        await message.chat.ban(
            user_id=user_id,
            until_date=until_date
        )
        await message.reply(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {time_input}.\n"
            f"–ë–∞–Ω –∏—Å—Ç–µ—á–µ—Ç: {until_date.strftime('%d.%m.%Y %H:%M:%S')} UTC"
        )
        logger.info(f"User {user_id} ({user_name}) –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {time_input} –≤ —á–∞—Ç–µ {message.chat.id}")
    except TelegramBadRequest as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {message.chat.id}: {str(e)}")
    except Exception as e:
        await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {message.chat.id}: {str(e)}")


@router.message(F.text)
async def count_messages(message: Message):
    await log_command(message)
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —á–∞—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
    if message.chat.id != settings.CHAT_ID:
        return
        
    try:
        async with AsyncSessionLocal() as session:
            async with session.begin():
                stmt = select(UserStats).where(
                    UserStats.user_id == message.from_user.id,
                    UserStats.chat_id == message.chat.id
                ).with_for_update()
                
                result = await session.execute(stmt)
                user_stats = result.scalar_one_or_none()
                
                if not user_stats:
                    user_stats = UserStats(
                        user_id=message.from_user.id,
                        chat_id=message.chat.id,
                        message_count=1,
                        last_message_date=datetime.now(timezone.utc)
                    )
                    session.add(user_stats)
                else:
                    user_stats.message_count += 1
                    user_stats.last_message_date = datetime.now(timezone.utc)
                
                await session.commit()
            
    except Exception as e:
        logger.error(f"Error counting message: {e}")