from aiogram import BaseMiddleware
from aiogram.types import Message, Update
from typing import Any, Awaitable, Callable, Dict
from collections import defaultdict
import time
from config import get_settings
import asyncio
from utils.logger import BotLogger

logger = BotLogger.get_logger()
settings = get_settings()

class SpamFilter(BaseMiddleware):
    def __init__(self):
        self.user_messages = defaultdict(list)
        super().__init__()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        
        if not isinstance(event, Message):
            return await handler(event, data)
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if event.sender_chat:
            if event.sender_chat.id in [int(settings.CHANNEL_ID), int(settings.CHAT_ID)]:
                return await handler(event, data)
                
        if str(event.from_user.id) in settings.ADMIN_IDS.split(','):
            return await handler(event, data)
            
        try:
            member = await event.chat.get_member(event.from_user.id)
            if member.status in ['administrator', 'creator']:
                return await handler(event, data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = time.time()
        user_id = event.from_user.id
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.user_messages[user_id] = [
            msg_time for msg_time in self.user_messages[user_id]
            if current_time - msg_time < settings.SPAM_TIME_WINDOW
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.user_messages[user_id].append(current_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if len(self.user_messages[user_id]) > settings.SPAM_MESSAGE_LIMIT:
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await event.delete()
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã
                recent_warns = [
                    t for t in self.user_messages.get(f"warn_{user_id}", [])
                    if current_time - t < 60  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
                ]
                
                if recent_warns:
                    # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 10 –º–∏–Ω—É—Ç
                    until_date = current_time + 600  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç
                    await event.chat.restrict(
                        user_id=user_id,
                        permissions={"can_send_messages": False},
                        until_date=until_date
                    )
                    await event.answer(
                        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∞–º!"
                    )
                else:
                    # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    warn_msg = await event.answer(
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!"
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    self.user_messages.setdefault(f"warn_{user_id}", []).append(current_time)
                    
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    await asyncio.sleep(settings.SPAM_WARN_DELETION_DELAY)
                    await warn_msg.delete()
                
                return None
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞: {e}")
                return await handler(event, data)
                
        return await handler(event, data)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
spam_filter = SpamFilter()