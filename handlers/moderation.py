from aiogram import Router
from aiogram.types import Message
from filters.bad_word_filters import ContainsForbiddenWord
from sqlalchemy.future import select
from sqlalchemy.exc import NoResultFound
from database.database import AsyncSessionLocal
from database.models import Warning
from datetime import datetime, timezone
from utils.logger import BotLogger
from middlewares.spam_filter import SpamFilter
import asyncio
from config import get_settings

router = Router()

logger = BotLogger.get_logger()
settings = get_settings()

WARN_LIMIT = 3  # –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
spam_filter = SpamFilter()

@router.message(ContainsForbiddenWord())
async def handle_forbidden_words(message: Message):
    logger.info(f"Deleted message with forbidden words from user {message.from_user.id} in chat {message.chat.id}")
    await message.delete()
    chat_id = message.chat.id
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        stmt = select(Warning).where(Warning.chat_id == chat_id, Warning.user_id == user_id)
        result = await session.execute(stmt)
        warning = result.scalars().first()

        if warning:
            current_warnings = warning.warning_count
            warning.warning_count += 1
            warning.last_warning = datetime.now(timezone.utc)
        else:
            warning = Warning(
                chat_id=chat_id,
                user_id=user_id,
                warning_count=1,
                last_warning=datetime.now(timezone.utc)
            )
            session.add(warning)
            current_warnings = 1

        await session.commit()

        if warning.warning_count >= WARN_LIMIT:
            try:
                await message.chat.ban(user_id)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ({WARN_LIMIT}).")
                await message.chat.unban(user_id)
                # –°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                await session.delete(warning)
                await session.commit()
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warning.warning_count}/{WARN_LIMIT}.")  

# @router.message(spam_filter)
async def handle_spam(message: Message, spam_type: str, time_window: float = None):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warning_text = {
            "frequency": f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {time_window:.1f} —Å–µ–∫—É–Ω–¥!",
            "repeat": "‚ö†Ô∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
            "flood": "‚ö†Ô∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —Ñ–ª—É–¥–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!",
            "caps": "‚ö†Ô∏è –ù–µ –ø–∏—à–∏—Ç–µ –ö–ê–ü–°–û–ú!",
            "urls": "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!"
        }.get(spam_type, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warn_msg = await message.answer(
            f"{warning_text}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.mention_html()}"
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(settings.MESSAGE_DELETION_DELAY)
        await warn_msg.delete()
        
        logger.info(
            f"Spam detected from user {message.from_user.id}, "
            f"type: {spam_type}, chat: {message.chat.id}"
        )
        
    except Exception as e:
        logger.error(f"Error handling spam message: {e}", exc_info=True)  
