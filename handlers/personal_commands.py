from utils.logger import BotLogger
from aiogram import Router, Bot, F
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command
from config import get_settings
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger = BotLogger.get_logger()
settings = get_settings()

router = Router()

class AboutEditStates(StatesGroup):
    waiting_for_about = State()


@router.my_chat_member()
async def handle_bot_status_update(update: ChatMemberUpdated, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    try:
        logger.info(
            f"Bot status updated in chat {update.chat.id}. "
            f"New status: {update.new_chat_member.status}"
        )

        if update.new_chat_member.status == "left":
            logger.warning(f"–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {update.chat.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}", exc_info=True)

@router.chat_member()
async def handle_user_update(update: ChatMemberUpdated, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
        if update.old_chat_member.status != update.new_chat_member.status:
            if update.new_chat_member.status == "member":
                user = update.new_chat_member.user
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}!\n"
                    f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É <b>/rules</b>."
                )
                
                await bot.send_message(
                    chat_id=update.chat.id,
                    text=welcome_text,
                    parse_mode="HTML"
                )
                logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {update.chat.id}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}", exc_info=True)
        
@router.message(Command("edit_about"))
async def edit_about_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    if message.chat.type != "private" or message.from_user.id != settings.OWNER_ID:
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /about.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    await state.set_state(AboutEditStates.waiting_for_about)

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if message.chat.type != "private" or message.from_user.id != settings.OWNER_ID:
        return

    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.message(AboutEditStates.waiting_for_about)
async def process_about_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è about"""
    if message.chat.type != "private" or message.from_user.id != settings.OWNER_ID:
        return

    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
        with open('data/about_text.txt', 'w', encoding='utf-8') as f:
            f.write(message.text)

        await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        await state.clear()

@router.message(Command("view_about"))
async def view_about_command(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    if message.chat.type != "private" or message.from_user.id != settings.OWNER_ID:
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        try:
            with open('data/about_text.txt', 'r', encoding='utf-8') as f:
                about_text = f.read()
        except FileNotFoundError:
            about_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."

        await message.answer(
            "–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n"
            f"{about_text}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        
@router.message()
async def handle_messages(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    try:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user and message.from_user.is_bot:
            return

        message_text = message.text[:50] + "..." if message.text else "<–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞>"
        logger.info(f"Message from {message.from_user.id if message.from_user else 'Unknown'} "
                   f"in chat {message.chat.id}: {message_text}")

        if message.chat.type == "private":
            if message.from_user.id == settings.OWNER_ID:
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.full_name}!\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/edit_about - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
                    "/view_about - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                )
                return
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        try:
            await message.bot.send_message(
                chat_id=settings.SHARECHAT_ID,
                text=f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{str(e)}"
            )
        except Exception as api_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {api_error}")
            

@router.channel_post()
async def handle_channel_post(message: Message):
    channel_id = settings.CHANNEL_ID
    message_id = message.message_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {message_id}")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º –ø–æ–¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ —É—Å–ø–µ–ª–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è
        await asyncio.sleep(10)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        max_attempts = 12  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt = 0
        
        while attempt < max_attempts:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            chat = await message.bot.get_chat(settings.CHAT_ID)
            
            if not chat.pinned_message:
                logger.error("–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await asyncio.sleep(5)
                attempt += 1
                continue
            
            pinned = chat.pinned_message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            if (pinned.forward_from_chat and 
                pinned.forward_from_chat.id == channel_id and 
                pinned.forward_from_message_id == message_id):
                
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", callback_data='chat_rules')]
                ])
                
                await message.bot.send_message(
                    chat_id=settings.CHAT_ID,
                    text=(
                        "‚¨áÔ∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Å–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏! ‚¨áÔ∏è"
                    ),
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_to_message_id=pinned.message_id,
                    reply_markup=keyboard
                )
                logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ")
                return
            else:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ñ–¥–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—É—â–µ–µ: {pinned.forward_from_message_id}, –æ–∂–∏–¥–∞–µ–º: {message_id})")
            
            await asyncio.sleep(5)
            attempt += 1
        
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}"
        logger.error(error_msg)
            
            
@router.callback_query(F.data == 'chat_rules')
async def chat_rules(callback: CallbackQuery):
    rules_text = (
            "üìú *–ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê –ê–ô–¢–ò–®–ù–ò–ö–û–í*\n\n"
            "üö´ *1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –±—ã—Ç—å —Ç—É–ø—ã–º*\n\n"
            "üö´ *2. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–ø–∞–º –∏ —Ñ–ª—É–¥*\n"
            "‚Ä¢ –†–∞–∑–±–∏—Ç–∏–µ –º—ã—Å–ª–µ–π –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ–ª–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –û—Ñ—Ñ—Ç–æ–ø —Å—Ç–∏–∫–µ—Ä–∞–º–∏, –≤–∏–¥–µ–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, —Ç–µ–∫—Å—Ç–∞–º–∏\n\n"
            "üö´ *3. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞*\n"
            "_‚ùóÔ∏è –í–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ç—Å—ã–ª–∫–∏, —Å–∏–º–≤–æ–ª–∏–∫—É –∏ '–ø–∞—Å—Ö–∞–ª–∫–∏'_\n\n"
            "üö´ *4. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å—Ä–∞—á–∏ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã*\n"
            "‚Ä¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã\n"
            "_‚ùóÔ∏è –†–µ—à–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö_\n\n"
            "üîû *5. –ó–∞–ø—Ä–µ—â—ë–Ω NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç*\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç 18+, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, —ç—Ä–æ—Ç–∏–∫–∞\n"
            "‚Ä¢ –ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å, —à–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–∞\n"
            "‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ\n\n"
            "üîí *6. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ª–∏–≤ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*\n"
            "‚Ä¢ –ù–æ–º–µ—Ä–∞, –∞–¥—Ä–µ—Å–∞, –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç, –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
            "‚Ä¢ –î–µ–∞–Ω–æ–Ω/–¥–æ–∫—Å–∏–Ω–≥ –≤ –ª—é–±–æ–º –≤–∏–¥–µ\n"
            "_‚ùóÔ∏è –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ª–∏–≤ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Boosty, Patreon –∏ –¥—Ä.)_\n\n"
            "üì¢ *7. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞*\n"
            "‚Ä¢ –ü–∏–∞—Ä –≤ –Ω–∏–∫–Ω–µ–π–º–µ –∏–ª–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ\n"
            "‚Ä¢ –†–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥—ã\n\n"
            "üé≠ *8. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –ª–∏—Ü*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö –∏–º—ë–Ω\n"
            "‚Ä¢ –ò–º–∏—Ç–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            "‚õîÔ∏è *9. –ó–∞–ø—Ä–µ—â–µ–Ω –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            "üìπ *10. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–∏–¥–µ–æ—á–∞—Ç–∞*\n\n"
            "‚ö†Ô∏è *–í–ê–ñ–ù–û:*\n"
            "‚Ä¢ –ó–∞ –ª—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –∂–∞–ª–æ–± –Ω–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π\n"
            "_‚ùóÔ∏è –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–º–∏ –∫–∞—Ä–∞–µ—Ç—Å—è –±–∞–Ω–æ–º_\n\n"
            "üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö."
        )
    await callback.message.reply(rules_text, parse_mode="Markdown")
    await callback.answer()
